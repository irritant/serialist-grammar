/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function(flags, voices) {
              flags.forEach(function(flag) {
                  switch (flag) {
                      case 'flat':
                          voices = voices.map(function(voice) {
                              return flatten_voice(voice);
                          });
                          break;
                      default:
                          break;
                  }
              });

              return voices;
          },
      peg$c1 = "flat",
      peg$c2 = peg$literalExpectation("flat", false),
      peg$c3 = function(flag) {
              return flag;
          },
      peg$c4 = function(voice) { return voice; },
      peg$c5 = function(head, voice) { return voice; },
      peg$c6 = function(head, tail) {
              return head.concat([tail]);
          },
      peg$c7 = "id",
      peg$c8 = peg$literalExpectation("id", false),
      peg$c9 = function(label, value) {
              return [label, value];
          },
      peg$c10 = "(",
      peg$c11 = peg$literalExpectation("(", false),
      peg$c12 = /^[a-zA-Z0-9]/,
      peg$c13 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false),
      peg$c14 = ")",
      peg$c15 = peg$literalExpectation(")", false),
      peg$c16 = function(value) {
              return value;
          },
      peg$c17 = "pc",
      peg$c18 = peg$literalExpectation("pc", false),
      peg$c19 = function(label, row) {
              return [label, row[0]];
          },
      peg$c20 = function(row, t) { return t; },
      peg$c21 = function(row, transforms) {
              if (transforms) {
                  row = apply_pitch_class_row_transforms(row, transforms);
              }

              return row;
          },
      peg$c22 = function(pc) { return pc; },
      peg$c23 = function(head, pc) { return pc; },
      peg$c24 = function(head, tail) {
              return head.concat(tail);
          },
      peg$c25 = "oct",
      peg$c26 = peg$literalExpectation("oct", false),
      peg$c27 = function(row, transforms) {
              if (transforms) {
                  row = apply_octave_row_transforms(row, transforms);
              }

              return row;
          },
      peg$c28 = function(i) { return i; },
      peg$c29 = function(head, i) { return i; },
      peg$c30 = "dyn",
      peg$c31 = peg$literalExpectation("dyn", false),
      peg$c32 = function(row, transforms) {
              if (transforms) {
                  row = apply_dynamics_row_transforms(row, transforms);
              }

              return row;
          },
      peg$c33 = function(f) { return f; },
      peg$c34 = function(head, f) { return f; },
      peg$c35 = function(head, tail) {
              return head.concat(tail).map(function(f) {
                  // Limit to range 0-1:
                  return Math.min(1.0, Math.max(f, 0.0));
              });
          },
      peg$c36 = "dur",
      peg$c37 = peg$literalExpectation("dur", false),
      peg$c38 = function(row, transforms) {
              if (transforms) {
                  row = apply_duration_row_transforms(row, transforms);
              }

              return row;
          },
      peg$c39 = function(head, tail) {
              return head.concat(tail).filter(function(f) {
                  // Filter zero and negative values:
                  return f > 0.0;
              });
          },
      peg$c40 = "@",
      peg$c41 = peg$literalExpectation("@", false),
      peg$c42 = "r",
      peg$c43 = peg$literalExpectation("r", false),
      peg$c44 = "i",
      peg$c45 = peg$literalExpectation("i", false),
      peg$c46 = function(form) {
              return ['forms', form];
          },
      peg$c47 = "<<",
      peg$c48 = peg$literalExpectation("<<", false),
      peg$c49 = ">>",
      peg$c50 = peg$literalExpectation(">>", false),
      peg$c51 = function(op, val) {
              return ['rotation', [op, val]];
          },
      peg$c52 = "[",
      peg$c53 = peg$literalExpectation("[", false),
      peg$c54 = "]",
      peg$c55 = peg$literalExpectation("]", false),
      peg$c56 = function(head, tail) {
              return ['slice', head.concat(tail)];
          },
      peg$c57 = "+",
      peg$c58 = peg$literalExpectation("+", false),
      peg$c59 = "-",
      peg$c60 = peg$literalExpectation("-", false),
      peg$c61 = "*",
      peg$c62 = peg$literalExpectation("*", false),
      peg$c63 = "/",
      peg$c64 = peg$literalExpectation("/", false),
      peg$c65 = "%",
      peg$c66 = peg$literalExpectation("%", false),
      peg$c67 = function(op, val) {
              return ['math', [op, val]];
          },
      peg$c68 = /^[0-9te]/,
      peg$c69 = peg$classExpectation([["0", "9"], "t", "e"], false, false),
      peg$c70 = function(pc) {
              switch(pc) {
                  case 't':
                      return 10;
                  case 'e':
                      return 11;
                  default:
                      return +pc % 12;
              }
          },
      peg$c71 = /^[0-9]/,
      peg$c72 = peg$classExpectation([["0", "9"]], false, false),
      peg$c73 = function(f) { return isNaN(f) ? 0 : +f },
      peg$c74 = function(sign, i) { return (sign) ? 0 - (+i) : +i; },
      peg$c75 = function(i) { return +i },
      peg$c76 = ".",
      peg$c77 = peg$literalExpectation(".", false),
      peg$c78 = " ",
      peg$c79 = peg$literalExpectation(" ", false),
      peg$c80 = "\t",
      peg$c81 = peg$literalExpectation("\t", false),
      peg$c82 = "\n",
      peg$c83 = peg$literalExpectation("\n", false),
      peg$c84 = ",",
      peg$c85 = peg$literalExpectation(",", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseflag();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseflag();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevoice_sequence();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseflag() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespace_or_line_break();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c3(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevoice_sequence() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsevoice();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsevoice_separator();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c4(s3);
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parsevoice();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsevoice_separator();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c4(s3);
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parsevoice();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$c5(s1, s3);
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = peg$parsevoice_separator();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevoice() {
    var s0, s1;

    s0 = [];
    s1 = peg$parsevoice_id_label();
    if (s1 === peg$FAILED) {
      s1 = peg$parsepitch_class_row_label();
      if (s1 === peg$FAILED) {
        s1 = peg$parseoctave_row_label();
        if (s1 === peg$FAILED) {
          s1 = peg$parsedynamics_row_label();
          if (s1 === peg$FAILED) {
            s1 = peg$parseduration_row_label();
          }
        }
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsevoice_id_label();
      if (s1 === peg$FAILED) {
        s1 = peg$parsepitch_class_row_label();
        if (s1 === peg$FAILED) {
          s1 = peg$parseoctave_row_label();
          if (s1 === peg$FAILED) {
            s1 = peg$parsedynamics_row_label();
            if (s1 === peg$FAILED) {
              s1 = peg$parseduration_row_label();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsevoice_id_label() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespace_or_line_break();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsevoice_id_value();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsespace_or_line_break();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c9(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevoice_id_value() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespace_or_line_break();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        if (peg$c12.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c12.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c13); }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsespace_or_line_break();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c16(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepitch_class_row_label() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespace_or_line_break();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsepitch_class_row_transformed();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsespace_or_line_break();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepitch_class_row_transformed() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsepitch_class_row();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parserow_transform();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parsespace();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parsespace();
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c20(s1, s5);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parserow_transform();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsespace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsespace();
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c20(s1, s5);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepitch_class_row() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsepitch_class();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parsespace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsespace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c22(s5);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsepitch_class();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsespace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsespace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c22(s5);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsepitch_class();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c23(s3, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c24(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoctave_row_label() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespace_or_line_break();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseoctave_row_transform();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsespace_or_line_break();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoctave_row_transform() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseoctave_row();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parserow_transform();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parsespace();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parsespace();
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c20(s1, s5);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parserow_transform();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsespace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsespace();
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c20(s1, s5);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoctave_row() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsesigned_int();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parsespace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsespace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c28(s5);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsesigned_int();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsespace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsespace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c28(s5);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsesigned_int();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c29(s3, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c24(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedynamics_row_label() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespace_or_line_break();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parsedynamics_row_transform();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsespace_or_line_break();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedynamics_row_transform() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsedynamics_row();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parserow_transform();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parsespace();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parsespace();
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c20(s1, s5);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parserow_transform();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsespace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsespace();
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c20(s1, s5);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c32(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedynamics_row() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsefloat();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parsespace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsespace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c33(s5);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsefloat();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsespace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsespace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c33(s5);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsefloat();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c34(s3, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c35(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseduration_row_label() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c36) {
      s1 = peg$c36;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsespace_or_line_break();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseduration_row_transform();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsespace_or_line_break();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseduration_row_transform() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseduration_row();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parserow_transform();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parsespace();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parsespace();
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c20(s1, s5);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parserow_transform();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsespace();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsespace();
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c20(s1, s5);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c38(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseduration_row() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsefloat();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parsespace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsespace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c33(s5);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsefloat();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsespace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsespace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c33(s5);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parsefloat();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c34(s3, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c39(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_transform() {
    var s0;

    s0 = peg$parserow_forms();
    if (s0 === peg$FAILED) {
      s0 = peg$parserow_rotation();
      if (s0 === peg$FAILED) {
        s0 = peg$parserow_slice();
        if (s0 === peg$FAILED) {
          s0 = peg$parserow_math();
        }
      }
    }

    return s0;
  }

  function peg$parserow_forms() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (input.charCodeAt(peg$currPos) === 114) {
          s4 = peg$c42;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c43); }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 105) {
            s4 = peg$c44;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (input.charCodeAt(peg$currPos) === 114) {
            s4 = peg$c42;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c43); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 105) {
              s4 = peg$c44;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c46(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_rotation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c49) {
        s1 = peg$c49;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseint();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c51(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_slice() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c52;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c53); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsespace();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsespace();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseint();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parsespace();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsespace();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c28(s5);
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseint();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$parsespace();
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parsespace();
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s5 = peg$c28(s5);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseint();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s4;
            s5 = peg$c29(s3, s5);
          }
          s4 = s5;
          if (s4 === peg$FAILED) {
            s4 = [];
            s5 = peg$parsespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsespace();
            }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c54;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c55); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserow_math() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsespace();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 43) {
        s2 = peg$c57;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c59;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s2 = peg$c61;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 47) {
              s2 = peg$c63;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c64); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 37) {
                s2 = peg$c65;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsespace();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseall_types();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c67(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseall_types() {
    var s0;

    s0 = peg$parsefloat();
    if (s0 === peg$FAILED) {
      s0 = peg$parseint();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesigned_int();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepitch_class();
        }
      }
    }

    return s0;
  }

  function peg$parsepitch_class() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$c68.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c70(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefloat() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = [];
    if (peg$c71.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      if (peg$c71.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parsedot();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (peg$c71.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c73(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesigned_int() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseint();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c74(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c71.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c71.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c72); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedot() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c76;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }

    return s0;
  }

  function peg$parsespace() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c78;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c79); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 9) {
        s0 = peg$c80;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
    }

    return s0;
  }

  function peg$parseline_break() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c82;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }

    return s0;
  }

  function peg$parsespace_or_line_break() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsespace();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsespace();
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseline_break();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseline_break();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsespace();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsespace();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevoice_separator() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsespace_or_line_break();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c84;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsespace_or_line_break();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


      // Voice:

      function flatten_voice(voice) {
          if (voice.length === 0) {
              return null;
          }

          var flat = {
              id: '',
              pc: [],
              oct: [],
              dyn: [],
              dur: []
          };

          voice.forEach(function(element) {
              var type = element[0];
              var val = element[1];

              if (Array.isArray(val)) {
                  flat[type] = flat[type].concat(val);
              } else {
                  flat[type] = val;
              }
          });

          return flat;
      }

      // Pitch class rows:

      function apply_pitch_class_row_transforms(row, transforms) {
          transforms.forEach(function(t) {
              var transform_name = t[0];
              var transform_args = t[1];

              // Evaluate forms:
              if (transform_name == 'forms') {
                  row = apply_row_forms(row, transform_args, function(f) {
                      // Round the result:
                      return Math.round(12 - f)  % 12;
                  });
              }

              // Evaluate math:
              if (transform_name == 'math') {
                  row = apply_row_math(row, transform_args, function(f) {
                      // Round the result:
                      return Math.round(f)  % 12;
                  });
              }

              // Evaluate rotations:
              if (transform_name == 'rotation') {
                  row = apply_row_rotation(row, transform_args);
              }

              // Evaluate slices:
              if (transform_name == 'slice') {
                  row = apply_row_slice(row, transform_args);
              }

          });

          return row;
      }

      // Octave rows:

      function apply_octave_row_transforms(row, transforms) {
          transforms.forEach(function(t) {
              var transform_name = t[0];
              var transform_args = t[1];

              // Evaluate forms:
              if (transform_name == 'forms') {
                  row = apply_row_forms(row, transform_args, function(f) {
                      // Round the result:
                      return Math.round(-f);
                  });
              }

              // Evaluate math:
              if (transform_name == 'math') {
                  row = apply_row_math(row, transform_args, function(f) {
                      // Round the result:
                      return Math.round(f);
                  });
              }

              // Evaluate rotations:
              if (transform_name == 'rotation') {
                  row = apply_row_rotation(row, transform_args);
              }

              // Evaluate slices:
              if (transform_name == 'slice') {
                  row = apply_row_slice(row, transform_args);
              }

          });

          return row;
      }

      // Dynamics rows:

      function apply_dynamics_row_transforms(row, transforms) {
          transforms.forEach(function(t) {
              var transform_name = t[0];
              var transform_args = t[1];

              // Evaluate forms:
              if (transform_name == 'forms') {
                  row = apply_row_forms(row, transform_args, function(f) {
                      // Limit the result:
                      return Math.min(1.0, Math.max(1.0 - f, 0.0));
                  });
              }

              // Evaluate math:
              if (transform_name == 'math') {
                  row = apply_row_math(row, transform_args, function(f) {
                      // Limit the result:
                      return Math.min(1.0, Math.max(f, 0.0));
                  });
              }

              // Evaluate rotations:
              if (transform_name == 'rotation') {
                  row = apply_row_rotation(row, transform_args);
              }

              // Evaluate slices:
              if (transform_name == 'slice') {
                  row = apply_row_slice(row, transform_args);
              }

          });

          return row;
      }

      // Duration rows:

      function apply_duration_row_transforms(row, transforms) {
          transforms.forEach(function(t) {
              var transform_name = t[0];
              var transform_args = t[1];

              // Evaluate forms:
              if (transform_name == 'forms') {
                  row = apply_row_forms(row, transform_args, function(f) {
                      // Limit the result:
                      return Math.max(1.0 / f, 0);
                  });
              }

              // Evaluate math:
              if (transform_name == 'math') {
                  row = apply_row_math(row, transform_args, function(f) {
                      // Limit the result:
                      return Math.max(f, 0);
                  })
                  .filter(function(f) {
                      // Filter zero and negative values:
                      return f > 0;
                  });
              }

              // Evaluate rotations:
              if (transform_name == 'rotation') {
                  row = apply_row_rotation(row, transform_args);
              }

              // Evaluate slices:
              if (transform_name == 'slice') {
                  row = apply_row_slice(row, transform_args);
              }

          });

          return row;
      }

      // Row forms:

      function apply_row_forms(row, args, inversion_transform) {
          args.forEach(function(form) {
              switch(form) {
                  case 'r':
                      row = row.reverse();
                      break;
                  case 'i':
                      row = row.map(function(f) {
                          if (typeof inversion_transform == 'function') {
                              return inversion_transform(f);
                          } else {
                              return f;
                          }
                      });
                      break;
                  default:
                      break;
              }
          });

          return row;
      }

      // Row math:

      function apply_row_math(row, args, value_transform) {
          var op = args[0];
          var val = args[1];

          row = row.map(function(f) {
              switch (op) {
                  case '+':
                      f += val;
                      break;
                  case '-':
                      f -= val;
                      break;
                  case '*':
                      f *= val;
                      break;
                  case '/':
                      f /= (val !== 0) ? val : 1;
                      break;
                  case '%':
                      f %= val;
                      break;
                  default:
                      break;
              }

              if (typeof value_transform == 'function') {
                  return value_transform(f);
              } else {
                  return f;
              }
          });

          return row;
      }

      // Row rotation:

      function apply_row_rotation(row, args) {
          var op = args[0];
          var val = args[1] % row.length;

          switch (op) {
              case '<<':
                  var head = row.slice(0, row.length - val);
                  var tail = row.slice(row.length - val, row.length);
                  row = tail.concat(head);
                  break;
              case '>>':
                  var head = row.slice(0, val);
                  var tail = row.slice(val, row.length);
                  row = tail.concat(head);
                  break;
              default:
                  break;
          }

          return row;
      }

      // Row slice:

      function apply_row_slice(row, args) {
          var start = args[0];
          var end = args[1];
          return row.slice(start, end);
      }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
